/// Declare/define functions for constitutive model interface performing
/// poro-viscoplasticity integration algorithm
/// 
/// Authors:
/// Sangmin Lee, [1], <slee43@nd.edu>
/// Alberto Salvadori, [1], <asalvad2@nd.edu>
/// 
/// [1] University of Notre Dame, Notre Dame, IN

#pragma once
#ifndef CM_METHOD_OF_MANUFACTURED_SOLUTIONS_H
#define CM_METHOD_OF_MANUFACTURED_SOLUTIONS_H

#include "constitutive_model.h"
#include "cm_placeholder_functions.h"

class CM_MMS_PARAM: public Model_parameters
{
  public:

  virtual int integration_algorithm(Constitutive_model *m,
                                    CM_Ctx &cm_ctx,
                                    const double *x,
                                    const double t) const;
  virtual int update_elasticity(const Constitutive_model *m,
                                CM_Ctx &cm_ctx,
                                double *L,
                                double *S,
                                const bool compute_stiffness) const;
  virtual int update_state_vars(Constitutive_model *m) const;  
  virtual int reset_state_vars(Constitutive_model *m) const;
  virtual int reset_state_vars_using_temporal(const Constitutive_model *m,
                                              State_variables *var) const;
  virtual int update_np1_state_vars_to_temporal(const Constitutive_model *m,
                                                State_variables *var) const;
  virtual int save_state_vars_to_temporal(const Constitutive_model *m,
                                          State_variables *var) const;
  virtual int get_var_info(Model_var_info &info) const;
  virtual int get_F(const Constitutive_model *m, 
                    double *F,
                    const int stepno) const;
  virtual int set_F(const Constitutive_model *m,
                    double *F,
                    const int stepno) const;
  virtual int get_pF(const Constitutive_model *m, 
                     double *F, 
                     const int stepno) const;
  virtual int get_eF(const Constitutive_model *m, 
                     double *F, 
                     const int stepno) const;
  virtual int get_eF_of_hF(const Constitutive_model *m, 
                           double *F, 
                           double *hFI, 
                           const int stepno) const;
  virtual int write_restart(FILE *fp,
                            const Constitutive_model *m) const;
  virtual int read_restart(FILE *fp,
                           Constitutive_model *m) const;
  virtual int compute_dMdu(const Constitutive_model *m,
                           CM_Ctx &cm_ctx,
                           double *Grad_op,
                           const int nne,
                           const int ndofn,
                           double *dM_du) const;
  virtual int read_param(FILE *in) const;
  virtual int set_init_vals(Constitutive_model *m) const;
};

/// below functions are generated by Matlab for manufactured solutions                     
void MMS4cm_pF(double *pF, const double t, const double X, const double Y, const double Z, const double *c);
void MMS4cm_displacement(double *u, const double t, const double X, const double Y, const double Z, const double *c);
void MMS4cm_velocity(double *v, const double t, const double X, const double Y, const double Z, const double *c);
void MMS4cm_initial_velocity(double *v, const double X, const double Y, const double Z, const double *c);
void MMS4cm_pressure_volume(double *P, double *V, HyperElasticity *elast, const double t, const double X, const double Y, const double Z, const double *c);
void MMS4cm_body_force(double *b, const HOMMAT *hommat, HyperElasticity *elast, const double t, const double X, const double Y, const double Z, const double *c);

#endif